name: Electrum CI/CD

on:
  push:
    branches: [master]
    tags: ['*']
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '30 2 * * *' # Nightly builds at 02:30 UTC

env:
  PYTHON_VERSION: '3.10'
  PIP_VERSION: '23.3.1'
  PYINSTALLER_VERSION: '6.0.0'

jobs:
  unittests:
    name: "Unit Tests (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - python-version: "3.13"
            extra-env: "{PYTHONASYNCIODEBUG: '1', PYTHONDEVMODE: '1'}"
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libegl1 libxkbcommon0 libdbus-1-3
        python -m pip install --upgrade pip==${{ env.PIP_VERSION }}
        pip install -r contrib/requirements/requirements.txt
        pip install -r contrib/requirements/requirements-ci.txt
        pip install tox coveralls
        
    - name: Build libsecp256k1
      run: |
        sudo apt-get install -y automake libtool
        ./contrib/make_libsecp256k1.sh
        
    - name: Run tests with Tox
      env: ${{ matrix.extra-env || {} }}
      run: |
        export ELECTRUM_ECC_DONT_COMPILE=1
        tox
        
    - name: Upload coverage to Coveralls
      if: ${{ matrix.python-version == '3.10' }}
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: |
        coveralls

  locale:
    name: "Upload translations to Crowdin"
    runs-on: ubuntu-22.04
    needs: unittests
    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gettext qt6-l10n-tools
        pip install -r contrib/requirements/requirements-ci.txt
        pip install requests
        
    - name: Push translations
      env:
        CROWDIN_API_KEY: ${{ secrets.CROWDIN_API_KEY }}
      run: |
        contrib/locale/push_locale.py

  regtest:
    name: "Regtest functional tests"
    runs-on: ubuntu-22.04
    needs: unittests
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq bc automake libtool
        python -m pip install --upgrade pip
        python -m pip install .[tests]
        python -m pip install git+https://github.com/spesmilo/electrumx.git@0b260d4345242cc41e316e97d7de10ae472fd172
        
    - name: Download and install Bitcoin Core
      run: |
        BITCOIND_VERSION=$(curl -s https://bitcoincore.org/en/download/ | grep -E -i --only-matching 'Latest version: [0-9\\.]+' | grep -E --only-matching '[0-9\\.]+')
        BITCOIND_FILENAME=bitcoin-$BITCOIND_VERSION-x86_64-linux-gnu.tar.gz
        curl -L https://bitcoincore.org/bin/bitcoin-core-$BITCOIND_VERSION/$BITCOIND_FILENAME | tar -xz -C /tmp
        sudo cp -a /tmp/bitcoin-$BITCOIND_VERSION/* /usr/
        
    - name: Build libsecp256k1
      run: |
        ./contrib/make_libsecp256k1.sh
        
    - name: Run regtests
      env:
        LD_LIBRARY_PATH: ${{ github.workspace }}/electrum
        ALLOW_ROOT: 1
      run: |
        tests/regtest/run_bitcoind.sh &
        tests/regtest/run_electrumx.sh &
        sleep 10
        python -m unittest tests/regtest.py

  linter:
    name: "Lint (Flake8)"
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Flake8
      run: |
        pip install flake8==7.2.0 flake8-bugbear==24.12.12
        
    - name: Run mandatory checks
      run: |
        flake8 . --count --select="E9,E101,E129,E273,E274,E703,E71,E722,F5,F6,F7,F8,W191,W29,B" \
          --ignore="B007,B009,B010,B019,B036,F541,F841" \
          --show-source --statistics --exclude "*_pb2.py,electrum/_vendor/"
          
    - name: Run optional checks
      continue-on-error: true
      run: |
        flake8 . --count --select="E,F,W,C90,B" --show-source --statistics --exclude "*_pb2.py,electrum/_vendor/"

  build-windows:
    name: "Build Windows"
    runs-on: windows-2022
    needs: unittests
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Build Windows installer
      run: |
        cd contrib/build-wine
        .\make_win.sh
        
    - uses: actions/upload-artifact@v4
      with:
        name: electrum-windows
        path: contrib/build-wine/dist/*
        
  build-android:
    name: "Build Android (${{ matrix.arch }})"
    runs-on: ubuntu-22.04
    needs: unittests
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        arch: [arm64-v8a]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Build Android APK
      run: |
        ./contrib/android/make_apk.sh qml "${{ matrix.arch }}" debug
        
    - uses: actions/upload-artifact@v4
      with:
        name: electrum-android-${{ matrix.arch }}
        path: dist/*

  build-appimage:
    name: "Build AppImage"
    runs-on: ubuntu-22.04
    needs: unittests
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Build AppImage
      run: |
        ./contrib/build-linux/appimage/make_appimage.sh
        
    - uses: actions/upload-artifact@v4
      with:
        name: electrum-appimage
        path: dist/*

  check-submodules:
    name: "Check submodules"
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Verify submodules
      run: |
        ./contrib/deterministic-build/check_submodules.sh
